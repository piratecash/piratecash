---
name: "cosanta-osx-18.0"
enable_cache: true
distro: "ubuntu"
suites:
- "focal"
architectures:
- "amd64"
packages:
- "ca-certificates"
- "curl"
- "g++"
- "git"
- "pkg-config"
- "autoconf"
- "librsvg2-bin"
- "libtiff-tools"
- "libtool"
- "automake"
- "faketime"
- "bsdmainutils"
- "imagemagick"
- "libcap-dev"
- "libz-dev"
- "libbz2-dev"
- "python3"
- "python3-dev"
- "python3-setuptools"
- "fonts-tuffy"
- "ccache"
- "cmake"
- "xorriso"
- "libtinfo5"
remotes:
- "url": "https://github.com/cosanta/cosanta-core.git"
  "dir": "cosanta"
files:
- "Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz"
script: |
  set -e -o pipefail

  WRAP_DIR=$HOME/wrapped
  HOSTS="x86_64-apple-darwin19"
  CONFIGFLAGS="--enable-reduce-exports --disable-miner --disable-bench --disable-gui-tests XORRISOFS=${WRAP_DIR}/xorrisofs DMG=${WRAP_DIR}/dmg --enable-crash-hooks"
  FAKETIME_HOST_PROGS=""
  FAKETIME_PROGS="ar ranlib date dmg xorrisofs"

  export TZ="UTC"
  export BUILD_DIR="$PWD"
  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}/depends
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}

    # Setup ccache to use correct cache directories
    CONFIGFLAGS="${CONFIGFLAGS} --enable-ccache"
    export CCACHE_DIR=${GBUILD_PACKAGE_CACHE}/ccache
    if [ -f ${GBUILD_PACKAGE_CACHE}/ccache.tar ]; then
      pushd ${GBUILD_PACKAGE_CACHE}
      tar xf ccache.tar
      rm ccache.tar
      popd
    fi
    # instead of compressing ccache.tar, we let ccache handle it by itself
    # Otherwise we end up uncompressing/compressing a lot of cache files which we actually never use
    export CCACHE_COMPRESS=1
  else
    CONFIGFLAGS="${CONFIGFLAGS} --disable-ccache"
  fi

  export ZERO_AR_DATE=1

  # Use $LIB in LD_PRELOAD to avoid hardcoding the dir (See `man ld.so`)
  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
    echo "export LD_PRELOAD='/usr/\$LIB/faketime/libfaketime.so.1'" >> ${WRAP_DIR}/${prog}
    echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
    echo "\$REAL \$@" >> $WRAP_DIR/${prog}
    chmod +x ${WRAP_DIR}/${prog}
    touch -d "${REFERENCE_DATETIME}" ${WRAP_DIR}/${prog}
  done
  }

  function create_per-host_faketime_wrappers {
  for i in $HOSTS; do
    for prog in ${FAKETIME_HOST_PROGS}; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo "export LD_PRELOAD='/usr/\$LIB/faketime/libfaketime.so.1'" >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
        touch -d "${REFERENCE_DATETIME}" ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_faketime_wrappers "2000-01-01 12:00:00"
  export PATH=${WRAP_DIR}:${PATH}

  cd cosanta
  BASEPREFIX="${PWD}/depends"

  mkdir -p ${BASEPREFIX}/SDKs
  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz

  # Build dependencies for each host
  for i in $HOSTS; do
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}"
  done

  # Faketime for binaries
  export PATH=${PATH_orig}
  create_global_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
  export PATH=${WRAP_DIR}:${PATH}

  # Define DISTNAME variable.
  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME
  source contrib/gitian-descriptors/assign_DISTNAME

  GIT_ARCHIVE="${OUTDIR}/src/${DISTNAME}.tar.gz"

  # Create the source tarball
  mkdir -p "$(dirname "$GIT_ARCHIVE")"
  git archive --output="$GIT_ARCHIVE" HEAD

  ORIGPATH="$PATH"
  # Extract the git archive into a dir for each host and build
  for i in ${HOSTS}; do
    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}
    mkdir -p distsrc-${i}
    cd distsrc-${i}
    INSTALLPATH="${PWD}/installed/${DISTNAME}"
    mkdir -p ${INSTALLPATH}
    tar --strip-components=1 -xf "${GIT_ARCHIVE}"

    ./autogen.sh
    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}
    make ${MAKEOPTS}
    make -C src osx_debug
    make ${MAKEOPTS} -C src check-security
    make ${MAKEOPTS} -C src check-symbols
    make install-strip DESTDIR=${INSTALLPATH}

    make osx_volname
    make deploydir
    mkdir -p unsigned-app-${i}
    cp osx_volname unsigned-app-${i}/
    cp contrib/macdeploy/detached-sig-apply.sh unsigned-app-${i}
    cp contrib/macdeploy/detached-sig-create.sh unsigned-app-${i}
    cp ${BASEPREFIX}/${i}/native/bin/dmg unsigned-app-${i}
    mv dist unsigned-app-${i}
    pushd unsigned-app-${i}
    find . | sort | tar --mtime="$REFERENCE_DATETIME" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz
    popd

    make deploy OSX_DMG="${OUTDIR}/${DISTNAME}-osx-unsigned.dmg"

    cd installed
    find . -name "lib*.la" -delete
    find . -name "lib*.a" -delete
    rm -rf ${DISTNAME}/lib/pkgconfig
    find .. -name "*.dSYM" -exec cp -ra {} ${DISTNAME}/bin \;
    find ${DISTNAME} -not -path '*.dSYM*' | sort | tar --mtime="$REFERENCE_DATETIME" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz
    find ${DISTNAME} -path '*.dSYM*' | sort | tar --mtime="$REFERENCE_DATETIME" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz
    cd ../../
  done
  mv ${OUTDIR}/${DISTNAME}-x86_64-apple-darwin19.tar.gz ${OUTDIR}/${DISTNAME}-osx64.tar.gz
  mv ${OUTDIR}/${DISTNAME}-x86_64-apple-darwin19-debug.tar.gz ${OUTDIR}/${DISTNAME}-osx64-debug.tar.gz

  # Compress ccache (otherwise the assert file will get too huge)
  if [ "$CCACHE_DIR" != "" ]; then
    pushd ${GBUILD_PACKAGE_CACHE}
    tar cf ccache.tar ccache
    rm -rf ccache
    popd
  fi
