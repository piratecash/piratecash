---
name: "dash-linux-18.0"
enable_cache: true
suites:
- "bionic"
architectures:
- "amd64"
packages:
# Common dependencies.
- "autoconf"
- "automake"
- "binutils"
- "bison"
- "bsdmainutils"
- "ca-certificates"
- "curl"
- "faketime"
- "git"
- "libtool"
- "patch"
- "pkg-config"
- "python3"
- "libxkbcommon0"
- "ccache"
# Cross compilation HOSTS:
#  - arm-linux-gnueabihf
- "binutils-arm-linux-gnueabihf"
- "g++-8-arm-linux-gnueabihf"
#  - aarch64-linux-gnu
- "binutils-aarch64-linux-gnu"
- "g++-8-aarch64-linux-gnu"
#  - riscv64-linux-gnu
- "binutils-riscv64-linux-gnu"
- "g++-8-riscv64-linux-gnu"
remotes:
- "url": "https://github.com/cosanta/cosanta-core.git"
  "dir": "cosanta"
files: []
script: |
  set -e -o pipefail

  WRAP_DIR=$HOME/wrapped
  HOSTS="i686-pc-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu"
  CONFIGFLAGS="--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests --enable-crash-hooks"
  FAKETIME_HOST_PROGS="gcc g++"
  FAKETIME_PROGS="date ar ranlib nm"
  HOST_CFLAGS="-O2 -g"
  HOST_CXXFLAGS="-O2 -g"
  HOST_LDFLAGS=-static-libstdc++

  export TZ="UTC"
  export BUILD_DIR="$PWD"
  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}/depends
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}

    # Setup ccache to use correct cache directories and fix the compiler check of ccache
    CONFIGFLAGS="${CONFIGFLAGS} --enable-ccache"
    export CCACHE_DIR=${GBUILD_PACKAGE_CACHE}/ccache
    # As we later wrap the gcc binaries, this is fast
    export CCACHE_COMPILERCHECK="content"
    if [ -f ${GBUILD_PACKAGE_CACHE}/ccache.tar ]; then
      pushd ${GBUILD_PACKAGE_CACHE}
      tar xf ccache.tar
      rm ccache.tar
      popd
    fi
    # instead of compressing ccache.tar, we let ccache handle it by itself
    # Otherwise we end up uncompressing/compressing a lot of cache files which we actually never use
    export CCACHE_COMPRESS=1
  else
    CONFIGFLAGS="${CONFIGFLAGS} --disable-ccache"
  fi

  # We include the GCC version in all wrappers so that ccache can detect compiler upgrades when hashing the wrappers
  GCCVERSION=`gcc --version | head -1`

  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}
    echo "# GCCVERSION=${GCCVERSION}" >> ${WRAP_DIR}/${prog}
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
    echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${prog}
    echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
    echo "\$REAL \$@" >> $WRAP_DIR/${prog}
    chmod +x ${WRAP_DIR}/${prog}
    touch -d "${REFERENCE_DATETIME}" ${WRAP_DIR}/${prog}
  done
  }

  function create_per-host_faketime_wrappers {
  for i in $HOSTS; do
    for prog in ${FAKETIME_HOST_PROGS}; do
        if which ${i}-${prog}-8
        then
            echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
            echo "# GCCVERSION=${GCCVERSION}" >> ${WRAP_DIR}/${i}-${prog}
            echo "REAL=\`which -a ${i}-${prog}-8 | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
            echo 'export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1' >> ${WRAP_DIR}/${i}-${prog}
            echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
            chmod +x ${WRAP_DIR}/${i}-${prog}
            touch -d "${REFERENCE_DATETIME}" ${WRAP_DIR}/${i}-${prog}
        fi
    done
  done
  }

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_faketime_wrappers "2000-01-01 12:00:00"
  export PATH=${WRAP_DIR}:${PATH}

  cd cosanta
  BASEPREFIX="${PWD}/depends"
  # Build dependencies for each host
  for i in $HOSTS; do
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}"
  done

  # Faketime for binaries
  export PATH=${PATH_orig}
  create_global_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
  export PATH=${WRAP_DIR}:${PATH}

  # Define DISTNAME variable.
  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME
  source contrib/gitian-descriptors/assign_DISTNAME

  GIT_ARCHIVE="${OUTDIR}/src/${DISTNAME}.tar.gz"

  # Create the source tarball
  mkdir -p "$(dirname "$GIT_ARCHIVE")"
  git archive --output="$GIT_ARCHIVE" HEAD

  ORIGPATH="$PATH"
  # Extract the git archive into a dir for each host and build
  for i in ${HOSTS}; do
    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}
    mkdir -p distsrc-${i}
    cd distsrc-${i}
    INSTALLPATH="${PWD}/installed/${DISTNAME}"
    mkdir -p ${INSTALLPATH}
    tar -xf $GIT_ARCHIVE

    ./autogen.sh
    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS="${HOST_CFLAGS}" CXXFLAGS="${HOST_CXXFLAGS}" LDFLAGS="${HOST_LDFLAGS}"
    make ${MAKEOPTS}
    make ${MAKEOPTS} -C src check-security
    make ${MAKEOPTS} -C src check-symbols
    make install DESTDIR=${INSTALLPATH}
    cd installed
    find . -name "lib*.la" -delete
    find . -name "lib*.a" -delete
    rm -rf ${DISTNAME}/lib/pkgconfig
    find ${DISTNAME}/bin -type f -executable -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg
    find ${DISTNAME}/lib -type f -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg
    cp ../README.md ${DISTNAME}/
    find ${DISTNAME} -not -name "*.dbg" | sort | tar --mtime="$REFERENCE_DATETIME" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz
    find ${DISTNAME} -name "*.dbg" | sort | tar --mtime="$REFERENCE_DATETIME" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz
    cd ../../
    rm -rf distsrc-${i}
  done

  # Compress ccache (otherwise the assert file will get too huge)
  if [ "$CCACHE_DIR" != "" ]; then
    pushd ${GBUILD_PACKAGE_CACHE}
    tar cf ccache.tar ccache
    rm -rf ccache
    popd
  fi
