# Copyright (c) 2009-2010 Satoshi Nakamoto
# Copyright (c) 2016-2020 Mistific@tor
# Copyright (c) 2018-2022 The PirateCash developers
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

USE_UPNP:=0
USE_WALLET:=1
USE_LOWMEM:=0
STATIC:=1

C:=clang
CXX:=clang++

DEPSDIR=/usr/local
DEPSDIR1=/usr

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj \
 -I"$(DEPSDIR)/include" \
 -I"$(DEPSDIR)/include/boost/" \
 -I"$(DEPSDIR)/include/db48/" \
 -I"$(DEPSDIR)/include/openssl/"

LIBPATHS= \
 -L"$(DEPSDIR)/lib" \
 -L"$(DEPSDIR)/lib/" \
 -L"$(DEPSDIR)/lib/db48/"

LIBS= 

ifdef STATIC
# Build STATIC if you are redistributing the piratecashd binary
LIBS += \
 $(DEPSDIR)/lib/db48/libdb_cxx-4.8.a \
 $(DEPSDIR)/lib/libboost_system.a \
 $(DEPSDIR)/lib/libboost_filesystem.a \
 $(DEPSDIR)/lib/libboost_program_options.a \
 $(DEPSDIR)/lib/libboost_thread.a \
 $(DEPSDIR)/lib/libboost_chrono.a \
 $(DEPSDIR)/lib/libevent.a \
 $(DEPSDIR)/lib/libevent_pthreads.a \
 $(DEPSDIR)/lib/libgmp.a \
 $(DEPSDIR)/lib/libssl.a \
 $(DEPSDIR)/lib/libcrypto.a \
 $(DEPSDIR1)/lib/libz.a
else
LIBS += \
 -l db_cxx-4.8 \
 -l boost_system \
 -l boost_filesystem \
 -l boost_program_options \
 -l boost_thread \
 -l boost_chrono \
 -l ssl \
 -l event \
 -l event_pthreads \
 -l gmp \
 -l crypto \
 -l z
endif

DEFS=-DBOOST_SPIRIT_THREADSAFE

DEBUGFLAGS=-g

# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=-pthread -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter -Wunused-function -Wunused-variable -fpermissive -Wconversion-null -Wno-deprecated-declarations\
    $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS) -static

OBJS= \
    obj/alert.o \
    obj/torcontrol.o \
    obj/allocators.o \
    obj/validationinterface.o \
    obj/scheduler.o \
    obj/version.o \
    obj/support/cleanse.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrdb.o \
    obj/addrman.o \
    obj/base58.o \
    obj/crypter.o \
    obj/key.o \
    obj/pubkey.o \
    obj/ecwrapper.o \
    obj/init.o \
    obj/bitcoind.o \
    obj/keystore.o \
    obj/primitives/transaction.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/rpcclient.o \
    obj/rpcprotocol.o \
    obj/rpcserver.o \
    obj/rpcmisc.o \
    obj/rpcnet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/scrypt.o \
    obj/sync.o \
    obj/txmempool.o \
    obj/util.o \
    obj/utilstrencodings.o \
    obj/utilmoneystr.o \
    obj/utiltime.o \
    obj/random.o \
    obj/hash.o \
    obj/bloom.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/chainparams.o \
    obj/stealth.o \
    obj/activemasternode.o \
    obj/darksend.o \
    obj/darksend-relay.o \
    obj/instantx.o \
    obj/masternodeconfig.o \
    obj/masternodeman.o \
    obj/masternode.o \
    obj/masternode-payments.o \
    obj/rpcdarksend.o \
    obj/spork.o \
    obj/crypto/hmac_sha256.o \
    obj/crypto/hmac_sha512.o \
    obj/crypto/ripemd160.o \
    obj/crypto/sha1.o \
    obj/crypto/sha256.o \
    obj/crypto/sha512.o \

ifeq (${USE_WALLET}, 1)
    DEFS += -DENABLE_WALLET
    OBJS += \
        obj/wallet/db.o \
        obj/miner.o \
        obj/wallet/rpcdump.o \
        obj/rpcmining.o \
        obj/wallet/rpcwallet.o \
        obj/wallet/wallet.o \
        obj/wallet/walletdb.o
endif

ifndef USE_UPNP
    override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
    DEFS += -DUSE_UPNP=$(USE_UPNP)
ifdef STATIC
    LIBS += $(DEPSDIR)/lib/libminiupnpc.a
else
    LIBS += -lminiupnpc
endif
endif

ifeq (${USE_LOWMEM}, 1)
    DEFS += -DLOWMEM
endif

all: piratecashd

# build secp256k1
DEFS += $(addprefix -I,$(CURDIR)/secp256k1/include)
secp256k1/src/libsecp256k1_la-secp256k1.o:
	@echo "Building Secp256k1 ..."; cd secp256k1; chmod 755 *; ./autogen.sh; ./configure --enable-module-recovery; C=$(C) CXX=$(CXX) gmake; cd ..;
piratecashd: secp256k1/src/libsecp256k1_la-secp256k1.o

# build leveldb
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..."; cd leveldb; chmod 755 *; C=$(C) CXX=$(CXX) gmake libleveldb.a libmemenv.a; cd ..;
obj/txdb.o: leveldb/libleveldb.a

# auto-generated dependencies:
-include obj/*.P

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

obj/%.o: %.c
	$(C) -c $(xCXXFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	-e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	rm -f $(@:%.o=%.d)

piratecashd: $(OBJS:obj/%=obj/%)
	$(CXX) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ $(xLDFLAGS) $(LIBS)

clean:
	-rm -f piratecashd
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/build.h

FORCE:
